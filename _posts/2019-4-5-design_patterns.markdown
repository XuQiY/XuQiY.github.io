---
layout:     post
title:      "设计模式"
subtitle:   " \"设计模式\""
date: "2019-4-5 23:00"
author:     "Mrx"
header-img: "img/post-bg-css.jpg"
catalog: true
tags:
    - 软考
    - Regex
    - 设计模式
---

> ”Bad times make a good man”
> ### **设计模式**
  报了五月份的软考，今天在复习设计模式中跌倒了好几次。自己常用和熟悉的设计模式有单例和工厂模式。但是查了下发觉设计模式有23种，这说明自己还有21种没掌握，有些平时还是会用到，只是未闻其名，例如装饰器模式和适配器模式。
-   装饰模式:就是给对象动态的增加一些功能。
-   观察者模式:当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。
-   策略模式:定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。
-   外观模式:是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度

---

###  **六大原则**
-   总原则：开闭原则(Open Close Principle)
  一句话来说就是对扩展开外放，对修改关闭。也就是在程序需要进行扩展的时候
  不能去修改原有代码，而是要扩展原有的代码，实现一个热拔插的效果，这是为了使
  程序的扩展性好，易于维护和升级。
  
-   **一**：**单一职责原则**
 不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。 
 
-   **二**：**里氏替换原则**
  LSP所表述的就是在同一个继承体系中的对象应该有共同的行为特征。
  
-   **三**:**依赖倒转原则**
  这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。
  
-   **四**:**接口隔离原则**
  每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。
  
-   **五**:**迪米特法则**
  一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。
  
-   **六**:**合成复用原则**
  尽量首先使用合成/聚合的方式，而不是使用继承。
  
>   Mrx
